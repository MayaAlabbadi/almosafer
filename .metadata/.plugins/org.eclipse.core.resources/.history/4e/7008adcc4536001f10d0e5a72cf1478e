import static org.testng.Assert.assertEquals;

import java.time.Duration;
import java.time.LocalDate;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class myTestCases {
	WebDriver driver = new ChromeDriver();
	String url = "https://global.almosafer.com/en";
	String expectedLanguage = "en";
	String expectedarabicLanguage = "ar";
	String expectedCurrency ="SAR";
	String expectedContactNumber="+966554400000";
	Random rand =new Random();
	
	@BeforeTest
	public void mySetup() {
		driver.get(url);
		driver.manage().window().maximize();
		
	    driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(8)); //autohandling max 8sec 
		//cssSelector take the class name and in any space put dot
		driver.findElement(By.cssSelector(".sc-jTzLTM.hQpNle.cta__button.cta__saudi.btn.btn-primary")).click();
	}
	
	@Test 
	public void ChecktheLanguage() {
		WebElement HtmlTag = driver.findElement(By.tagName("html"));
		String ActualLanguage =HtmlTag.getAttribute("lang");
		org.testng.Assert.assertEquals(ActualLanguage, expectedLanguage);
		
	}
	
	@Test
	public void TestTheCurrencyisSAR() {
		String ActualCurrency = driver.findElement(By.xpath("//button[@data-testid='Header__CurrencySelector\']")).getText();
		org.testng.Assert.assertEquals(ActualCurrency, expectedCurrency);
		
	}
	
	@Test
	public void expectedContactNumber() {
		String ActualContactNumber = driver.findElement(By.tagName("strong")).getText();
		org.testng.Assert.assertEquals(ActualContactNumber, expectedContactNumber);
	}

	@Test
	public void CheckQitafLogo() {
		boolean QuitafLogo = true;
	   WebElement TheFooterTag = driver.findElement(By.tagName("footer"));
	 boolean ActualResult= TheFooterTag.findElement(By.cssSelector(".sc-eopZyb.dngPsA")).findElement(By.tagName("svg")).isDisplayed();
	 org.testng.Assert.assertEquals(ActualResult, QuitafLogo);
	
	}
	
	@Test
	public void CheckHotelTabisNOTselected() {
		String expectedResult= "false";
		String ActualResult= driver.findElement(By.id("uncontrolled-tab-example-tab-hotels")).getAttribute("aria-selected");
		org.testng.Assert.assertEquals(ActualResult, expectedResult);
		
	}
	
	@Test
	public void CheckdepartureandReturnDate() {
		LocalDate today= LocalDate.now();
		int ExpectedDepartureDate = today.plusDays(1).getDayOfMonth();
		int ExpectedReturnDate = today.plusDays(2).getDayOfMonth();
		String ActualDeparturedate =driver.findElement(By.cssSelector("div[class='sc-iHhHRJ sc-kqlzXE blwiEW'] span[class='sc-cPuPxo LiroG']")).getText();
		String ActualReturndate =driver.findElement(By.cssSelector("div[class='sc-iHhHRJ sc-OxbzP edzUwL'] span[class='sc-cPuPxo LiroG']")).getText();
		int ActualDepartureDateAsINT = Integer.parseInt(ActualDeparturedate);
		int ActualReturnDateAsINT = Integer.parseInt(ActualReturndate);
		org.testng.Assert.assertEquals(ActualDepartureDateAsINT, ExpectedDepartureDate);
		org.testng.Assert.assertEquals(ActualReturnDateAsINT, ExpectedReturnDate);
	}
	
	@Test(priority = 1)
	public void CheckLanguageRandomly() {
		String [] websites= {"https://global.almosafer.com/en","https://global.almosafer.com/ar"};
		int RandIndex=rand.nextInt(websites.length);
		driver.get(websites[RandIndex]);
		if(driver.getCurrentUrl().contains("en")) {
			
		    WebElement HtmlTag = driver.findElement(By.tagName("html"));
			String ActualLanguage =HtmlTag.getAttribute("lang");
			org.testng.Assert.assertEquals(ActualLanguage, expectedLanguage);
		}
		else if(driver.getCurrentUrl().contains("ar")) {
			
			  WebElement HtmlTag = driver.findElement(By.tagName("html"));
				String ActualLanguage =HtmlTag.getAttribute("lang");
				org.testng.Assert.assertEquals(ActualLanguage, expectedarabicLanguage);
		}
		
	}
	
	@Test(priority = 2)
	public void HotelSelection() {
		WebElement HotelTab =driver.findElement(By.id("uncontrolled-tab-example-tab-hotels"));
		HotelTab.click();
		WebElement SearchHotel = driver.findElement(By.cssSelector(".sc-phbroq-2.uQFRS.AutoComplete__Input"));
		//WebElement SearchHotel = driver.findElement(By.cssSelector("input[placeholder='Search for hotels or places']")); //the placeholder in arabic will change so it will not work when the website is in arabic
		if(driver.getCurrentUrl().contains("en")) {
			String [] EnglishCities = {"dubai","jeddah","riyadh"};
			int RandomIndex =rand.nextInt(EnglishCities.length);
			SearchHotel.sendKeys(EnglishCities[RandomIndex]);
			
		}else if(driver.getCurrentUrl().contains("ar")) {
			String [] ArabicCities = {"دبي","جدة"};
			int RandomIndex =rand.nextInt(ArabicCities.length);
			SearchHotel.sendKeys(ArabicCities[RandomIndex]);
			
		}
		
		
	}
	
	@Test (priority =3)
	public void SelectNumberOfPeople() {
		WebElement myElement= driver.findElement(By.xpath("//select[data-testid='HotelSearchBox__ReservationSelect_Select']"));
		Select mySelector = new Select(myElement);
		int RandIndex = rand.nextInt(2);
        mySelector.selectByIndex(RandIndex);	
	}
	
}
